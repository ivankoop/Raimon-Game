<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_car</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>accelerationY = 0;
accelerationX = 0;

left_released = false;
right_released = false;
up_released = false;
down_released = false;

car_max_speed = 5;

on_collision = false;

car_direction = "up";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message(accelerationY);

y += accelerationY;
x += accelerationX;

/*{
switch (keyboard_key)
   {
   case vk_left:
   case ord("A"):
      x -= 4;
      break;*/
      
show_debug_message(car_direction);

if(place_meeting(x,y,obj_invisible)){
    visible=false;
} else {
    visible=true;
}
 
 

switch (car_direction){
    case "up":
        if place_meeting(x, y - car_max_speed, obj_collision){
            y = y + car_max_speed;
        }   
    break;
    
    case "down":
        if place_meeting(x, y + car_max_speed, obj_collision){
            y = y - car_max_speed;
        }
    break;
    
    case "right":
        if place_meeting(x + car_max_speed,y, obj_collision){
            x = x - car_max_speed;
        }
    break;
    case "left":
        if place_meeting(x - car_max_speed,y, obj_collision){
            x = x + car_max_speed;
        }
    break;
    case "right_up":
        if place_meeting(x + car_max_speed, y - car_max_speed, obj_collision){
             x = x - car_max_speed;
             y = y + car_max_speed;
        }
    break;
    case "right_down":
        if place_meeting(x + car_max_speed, y + car_max_speed, obj_collision){
             x = x - car_max_speed;
             y = y - car_max_speed;
        }
    break;
    case "left_up":
      if place_meeting(x - car_max_speed, y - car_max_speed, obj_collision){
             x = x + car_max_speed;
             y = y + car_max_speed;
        }
    break;
    case "left_down":
      if place_meeting(x - car_max_speed, y + car_max_speed, obj_collision){
             x = x + car_max_speed;
             y = y - car_max_speed;
        }
    break;
}

/*if place_meeting(x,y,obj_collision){
    
        switch (car_direction){
        case "up":
            //accelerationY = -accelerationY;
            y = y + 10;
            break;
        case "down":
            //accelerationY = -accelerationY;
            y = y - 10;
            break;
        case "right":
            //accelerationX = +accelerationX;
            x = x - 10;
            break;
        case "left":
            //accelerationX = -accelerationX;
            x = x + 10;
        }

    on_collision = true;
} else {
    on_collision = false;
}*/
//   if !place_meeting(x - 5, y, obj_wall) x -=5;

if left_released {
  if accelerationX &lt; 0 {
    accelerationX += 1;
  } else if accelerationX == 0 {
    left_released = false;
  }
}

if right_released {
    if accelerationX &gt; 0 {
        accelerationX -= 1;
    } else if accelerationX == 0 {
        right_released = false;
    }
}

if up_released {
    if accelerationY &lt; 0 {
        accelerationY += 1;
    } else if accelerationY == 0 {
        up_released = false;
    }
}

if down_released {
    if accelerationY &gt; 0 {
        accelerationY -= 1;
    } else if accelerationY == 0 {
        down_released = false;
    }
}

if keyboard_check(vk_up) and !on_collision{
  car_direction = "up";
  if accelerationY &gt; -car_max_speed {
    accelerationY -= 1;
  }
   //y = acceleration;
   image_angle = 0;
}

if keyboard_check(vk_down) and !on_collision{
    car_direction = "down";
    if accelerationY &lt; car_max_speed {
           accelerationY += 1;
    }
 
    //y= acceleration;
    image_angle = 180;
}

if keyboard_check(vk_right) and !on_collision{
    car_direction = "right";
    if accelerationX &lt; car_max_speed {
        accelerationX += 1;
    }
    
    //x+=5;
    image_angle = -90;
  
}

if keyboard_check(vk_left) and !on_collision{
    car_direction = "left";
    if accelerationX &gt; -car_max_speed {
        accelerationX -= 1;
    }
    //x-=5;
    image_angle = 90;
}

if keyboard_check_released(vk_left){
   left_released = true;
}

if keyboard_check_released(vk_right){
    right_released = true;
}

if keyboard_check_released(vk_up){
    up_released = true;
}

if keyboard_check_released(vk_down){
    down_released = true;
}


if keyboard_check(vk_up) and keyboard_check(vk_right) {
    image_angle = -45;
    car_direction = "right_up";
}

if keyboard_check(vk_up) and keyboard_check(vk_left) {
    image_angle = 45;
    car_direction = "left_up";
}

if keyboard_check(vk_down) and keyboard_check(vk_left) {
    image_angle = 145;
    car_direction = "left_down";
}

if keyboard_check(vk_down) and keyboard_check(vk_right) {
    image_angle = 225;
     car_direction = "right_down";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
